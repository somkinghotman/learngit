### 变量，运算符与数据类型

#### （1）注释

‘#’  ， ‘ ‘’‘ ’‘’ ’，以及‘ “”“ ”“”  ’都可用来注释内容

#### （2）运算符

​     大多数算数运算符和比较运算符与C++基本相同

值得注意的是 **幂的操作符为****

#####      逻辑运算符 

有and or not #与，或，非

#####      三元运算符

example：

x,y = 4,5

small =x if x<y else y

print(small)#4

即用一个语句完成判断和赋值输出

#####     其他运算符

in（not in）    #（不）存在

is  (not is)        #（不）是

【例子】

```
letters = ['A', 'B', 'C']
if 'A' in letters:
    print('A' + ' exists')
if 'h' not in letters:
    print('h' + ' not exists')

# A exists
# h not exists
```

【例子】比较的两个变量均指向不可变类型。

```
a = "hello"
b = "hello"
print(a is b, a == b)  # True True
print(a is not b, a != b)  # False False
```

【例子】比较的两个变量均指向可变类型。

```
a = ["hello"]
b = ["hello"]
print(a is b, a == b)  # False True
print(a is not b, a != b)  # True False
```

- ###### <u>其中值得注意的是</u>

- **is, is not 对比的是两个变量的内存地址**

- **==, != 对比的是两个变量的值**

- 比较的两个变量，指向的都是地址不可变的类型（str等），那么is，is not 和 ==，！= 是完全等价的。

- 对比的两个变量，指向的是地址可变的类型（list，dict等），则两者是有区别的。

##### 位运算符

| 操作符 | 名称     | 示例     |
| ------ | -------- | -------- |
| `~`    | 按位取反 | `~4`     |
| `&`    | 按位与   | `4 & 5`  |
| \|     | 按位或   | 4\|5     |
| `^`    | 按位异或 | `4 ^ 5`  |
| `<<`   | 左移     | `4 << 2` |
| `>>`   | 右移     | `4 >> `  |

位运算符都是针对二进制的代码

&:有0则0
|:有1则1
^:相同则0，不同则1
~:按位取反

```csharp
<<:左移    左边最高位丢弃，右边补齐0
>>:右移    最高位是0，左边补齐0;最高为是1，左边补齐1
根据网络资料查找补充>>>:无符号右移 无论最高位是0还是1，左边补齐0
```

向右移动N 位就是除以2的n次幂

向左移则相反

例如system.out.println(12>>1)#6、

注意：**运算符的优先级**

- 一元运算符优于二元运算符。例如`3 ** -2`等价于`3 ** (-2)`。
- 先算术运算，后移位运算，最后位运算。例如 `1 << 3 + 2 & 7`等价于 `(1 << (3 + 2)) & 7`。
- 逻辑运算最后结合。例如`3 < 4 and 4 < 5`等价于`(3 < 4) and (4 < 5)`。

##### 3.变量和赋值

- 在使用变量之前，需要对其先赋值。
- 变量名可以包括字母、数字、下划线、但变量名不能以数字开头。
- Python 变量名是大小写敏感的，foo != Foo。

上述条件在我印象中和和C++大同小异

##### 4.数据类型和转换

| 类型  | 名称                    | 示例           |
| ----- | ----------------------- | -------------- |
| int   | 整型 `<class 'int'>`    | `-876, 10`     |
| float | 浮点型`<class 'float'>` | `3.149, 11.11` |
| bool  | 布尔型`<class 'bool'>`  | `True, False`  |

- ###### `isinstance(object, classinfo)` 判断一个对象是否是一个已知的类型。

- `type(object)` 获取类型信息

注：

- `type()` 不会认为子类是一种父类类型，不考虑继承关系。
- `isinstance()` 会认为子类是一种父类类型，考虑继承关系。

如果要判断两个类型是否相同推荐使用 `isinstance()`。



`decimal` 包里的 `Decimal` 对象和 `getcontext()` 方法可实现对浮点型小数点后若干位的保留

**注意**`getcontext()` 显示了 `Decimal` 对象的默认精度值是 28 位 (`prec=28`)。

```
decimal.getcontext().prec = 4
c = Decimal(1) / Decimal(3)
print(c)

# 0.3333
```

通过上述方式（getcontext().prec）调整精度

###### 布尔型

可以用 `bool(X)` 来创建变量，其中 `X` 可以是

- 基本类型：整型、浮点型、布尔型
- 容器类型：字符串、元组、列表、字典和集合

`bool` 作用在基本类型变量：`X` 只要不是整型 `0`、浮点型 `0.0`，`bool(X)` 就是 `True`，其余就是 `False`。

`bool` 作用在容器类型变量：`X` 只要不是空的变量，`bool(X)` 就是 `True`，其余就是 `False`。

确定`bool(X)` 的值是 `True` 还是 `False`，就看 `X` 是不是空，空的话就是 `False`，不空的话就是 `True`。

- 对于数值变量，`0`, `0.0` 都可认为是空的。
- 对于容器变量，里面没元素就是空的。



- **类型转换**
  - 转换为整型 `int(x, base=10)`
  - 转换为字符串 `str(object='')`
  - 转换为浮点型 `float(x)`
  - 

##### 5. print() 函数

```
print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
```

```
用法  print(item, end='&')
```

```
      print("This is printed with 'sep='&''.")
```

#### 思考题

c是编译性语言，执行速度快，不能跨平台，一般用于系统，驱动的底层开发

python是解释性语言，python不需要事先定义变量类型，执行速度慢但是可以跨平台，用于软件的快速开发

#### 练习题

1. 怎样对python中的代码进行注释？

    利用#或''' ''' 或""" """进行注释

2. python有哪些运算符，这些运算符的优先级是怎样的？

   有算数，逻辑，比较，三元，位等运算符

   优先级为一元先于二元，算数先于移位先于位运算符

3. python 中 `is`, `is not` 与 `==`, `!=` 的区别是什么？

   前者对比的是地址，后者对比的是值

4. python 中包含哪些数据类型？这些数据类型之间如何转换？

​       有int float bool str类型

转换方法 数据类型(object或是object=' ')

## 位运算

原码(就是其二进制表示)

**值得注意的是**最高位是符号位  0 为正   1 为负

对于正数而言

正数的补码和反码都是其原码

<u>而对于负数而言</u>

<u>反码为原码符号位不变，其余位取反</u>

<u>补码是反码+1</u>

~ 把补码中的所有0 1全部取反

&只有两个对应位都为 1 时才为 1

|只要两个对应位中有一个 1 时就为 1，都是0时为0

^只有两个对应位不同时才为 1

<<，>>

`num << i` 将`num`的二进制表示向左移动`i`位所得的值。

##### 快速计算

通过 `<<`，`>>` 快速计算2的倍数问题。

```
n << 1 -> 计算 n*2
n >> 1 -> 计算 n/2，负奇数的运算不可用
n << m -> 计算 n*(2^m)，即乘以 2 的 m 次方
n >> m -> 计算 n/(2^m)，即除以 2 的 m 次方
1 << n -> 2^n
```

通过 `^` 快速交换两个整数。

```
a ^= b
b ^= a
a ^= b
```

通过 `a & (-a)` 快速获取`a`的最后为 1 位置的整数。

```
00 00 01 01 -> 5
&
11 11 10 11 -> -5
```

#####  利用位运算实现整数集合

一个数的二进制表示可以看作是一个集合（0 表示不在集合中，1 表示在集合中）。

比如集合 `{1, 3, 4, 8}`，可以表示成 `01 00 01 10 10` 而对应的位运算也就可以看作是对集合进行的操作。

元素与集合的操作：

```
a | (1<<i)  -> 把 i 插入到集合中
a & ~(1<<i) -> 把 i 从集合中删除··
a & (1<<i)  -> 判断 i 是否属于该集合（零不属于，非零属于）
```

集合之间的操作：

```
a 补   -> ~a
a 交 b -> a & b
a 并 b -> a | b
a 差 b -> a & (~b)
```

#### 练习题

```python
list1=[2,2,1]

list2=[4,4,2,3,2]

x=0

for i in list1

x=x^i

print(x)
```

