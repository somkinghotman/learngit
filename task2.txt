### 条件语句

#### if语句

- 单个 if 语句中的 `expression` 条件表达式可以通过布尔操作符 `and`，`or`和`not` 实现多重条件判断。

【例子】

```
if 2 > 1 and not 2 > 3:
    print('Correct Judgement!')

# Correct Judgement!
```

####  if - else 语句

python中的if嵌套语句要特别注意else的悬挂问题

【例子】

```
hi = 6
if hi > 2:
    if hi > 7:
        print('\')
else:
    print('\')
```

-

```
temp = input()
guess = int(temp)
if guess > 8:
    print()
else:
    if guess == 8:
        print("")
    else:
        print("")

```

####  if - elif - else 语句

elif即为else if

与c++中使用逻辑大致相同

####  assert 关键词

assert后边的条件为 False 时，程序自动崩溃并抛出`AssertionError`的异常。

可用assert在程序中置入检查点，只有条件为 True 才能让程序正常工作

【例子】

```
my_list = ['lsgogroup']
my_list.pop(0)
assert len(my_list) > 0

# AssertionError
```

### 循环语句

#### while循环

while 表达式：

..............

表达式仅给出数值也是可以的，当`while`后写入一个非零整数时，视为真值，执行循环体；写入`0`时，视为假值，不执行循环体。也可以写入`str、list`或任何序列，<u>长度非零</u>则视为真值，执行循环体；否则视为假值，不执行循环体。

【例子】布尔表达式返回0，循环终止。

```
string = 'abcd'
while string:
    print(string)
    string = string[1:]

# abcd
# bcd
# cd
# d
```

#### while-else循环

如果`while`循环中执行了跳出循环的语句，比如 `break`，将不执行`else`代码块的内容。

#### for循环（迭代循环可以遍历所有的有序数列）

for 迭代变量 in 可迭代对象：

.........

【例子】

```
for i in 'ILoveLSGO':
    print(i, end=' ')  # 不换行输出

# I L o v e L S G O
```

#### for - else 循环

```
for 迭代变量 in 可迭代对象:
    代码块
else:
    代码块
```

`for`循环中执行了跳出循环的语句，比如 `break`，将不执行`else`代码块的内容，与`while - else`语句一样。

####  range() 函数

```
ange([start,] stop[, step=1])
```

这个BIF（Built-in functions）三个参数，其中用中括号括起来的两个表示这两个参数是可选的。

- `step=1` 表示第三个参数的默认值是1。
- `range` 这个BIF的作用是生成一个从`start`参数的值开始到`stop`参数的值结束的数字序列，该序列包含`start`的值**但不包含`stop`的值。**

【例子】

```
for i in range(2, 9):  # 不包含9
    print(i)

# 2
# 3
# 4
# 5
# 6
# 7
# 8
```

## enumerate()函数

```
enumerate(sequence, [start=0])
```

- sequence一个序列、迭代器或其他支持迭代对象。
- start -- 下标起始位置。
- 返回 enumerate(枚举) 对象

【例子】

```
seasons = ['Spring', 'Summer', 'Fall', 'Winter']
lst = list(enumerate(seasons))
print(lst)
# [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]
```

`enumerate()`与 for 循环的结合使用

```
for i, a in enumerate(A)
    do something with a  
```

用 `enumerate(A)` 不仅返回了 `A` 中的元素，还顺便给该元素一个索引值 (默认从 0 开始)。用 `enumerate(A, j)` 还可确定索引起始值为 `j`。

```
for i, language in enumerate(languages, 2):
    print(i, 'I love', language)
print('Done!')

'''
2 I love Python
3 I love R
4 I love Matlab
5 I love C++
Done!
```

#### break 语句

`break`语句可以跳出当前所在层的循环。

#### continue 语句

`continue`终止本轮循环并开始下一轮循环。

【例子】

```
for i in range(10):
    if i % 2 != 0:
        print(i)
        continue
    i += 2
    print(i)

# 2
# 1
# 4
# 3
```

#### pass 语句

“不做任何事”你在需要有语句的地方不写任何语句，那么解释器会提示出错，而 `pass` 语句就是用来解决这些问题的。

【例子】

```
def a_func():

# SyntaxError: unexpected EOF while parsing
```

```
def a_func():
    pass
```

`pass`是空语句，不做任何操作，只起到占位的作用，其作用是为了保持程序结构的完整性。尽管`pass`语句不做任何操作，但如果暂时不确定要在一个位置放上什么样的代码，可以先放置一个`pass`语句，让代码可以正常运行。

#### 推导式

##### **列表推导式**

```
[ expr for value in collection [if condition] ]
```

【例子】

```
x = [i ** 2 for i in range(1, 10)]
print(x)
# [1, 4, 9, 16, 25, 36, 49, 64, 81]
```

```
x = [(i, i ** 2) for i in range(6)]
print(x)

# [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]
```

```
x = [i for i in range(100) if (i % 2) != 0 and (i % 3) == 0]
print(x)

# [3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]
```

**元组推导式**

```
( expr for value in collection [if condition] )
```

【例子】

```
a = (x for x in range(10))
print(a)

# <generator object <genexpr> at 0x0000025BE511CC48>

print(tuple(a))

# (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
```

**字典推导式**

```
{ key_expr: value_expr for value in collection [if condition] }
```

【例子】

```
b = {i: i % 2 == 0 for i in range(10) if i % 3 == 0}
print(b)
# {0: True, 3: False, 6: True, 9: False}
```

**集合推导式**

```
{ expr for value in collection [if condition] }
```

【例子】

```
c = {i for i in [1, 2, 3, 4, 5, 5, 6, 4, 3, 2, 1]}
print(c)
# {1, 2, 3, 4, 5, 6}
```

### 练习题

1.

```python
a=(x for x in range(1501,2700) if(x%7)==0 and (x%5)==0)
print(x)
```

2

```
v1,v2,t,s,l=map(int,input().split())
if v1<=100andv2<=100ands<=10andt<=300andl<=10000
andl%v1=0andl%v2=0

```

